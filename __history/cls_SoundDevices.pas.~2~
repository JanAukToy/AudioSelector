unit cls_SoundDevices;

interface

uses
  System.SysUtils, System.Classes, Vcl.Forms,
  CWMIBase, CSoundDeviceInfo;

type

  TAudioDevices = class
  private
    f_SoundDeviceInfo: TSoundDeviceInfo;

    procedure AnalyzeAllDeviceProperties(const a_DeviceList: TStrings);
  public
    constructor Create();
    destructor Destroy; override;
  end;

const
  SOUDND_DEVICE_PROPERTYLIST: string = ['Caption', 'ConfigManagerErrorCode'];

implementation

uses
  System.StrUtils;

{ TAudioDevices }

//******************************************************************************
// コンストラクター
constructor TAudioDevices.Create;
begin
  f_SoundDeviceInfo := TSoundDeviceInfo.Create(nil);

  try
    // アクティベート
    f_SoundDeviceInfo.Active := True;

    Application.ProcessMessages;
    Sleep(100);

    // 解析実行
    AnalyzeAllDeviceProperties(f_SoundDeviceInfo.AllProperties);

  except
    on E: Exception do
    begin

    end;
  end;
end;

//******************************************************************************
// デストラクター
destructor TAudioDevices.Destroy;
begin
  FreeAndNil(f_SoundDeviceInfo);

  inherited;
end;

//******************************************************************************
// 全プロパティー（文字列）から解析してリスト生成
procedure TAudioDevices.AnalyzeAllDeviceProperties(const a_DeviceList: TStrings);
var
  l_PropertyList: TStringList;
  l_Temp: string;
  ii: Integer;
begin
  for ii := 0 to a_DeviceList.Count -  1 do
  begin
    l_PropertyList := TStringList.Create;

    try
      l_Temp := a_DeviceList[ii];
      l_Temp := ReplaceStr(l_Temp, ';', '');

      l_PropertyList.DelimitedText := MidStr(l_Temp, l_Temp.IndexOf('{') + 2, l_Temp.IndexOf('}'));
      l_PropertyList.Delimiter := #9;
      l_PropertyList.StrictDelimiter := True;

    finally
      l_PropertyList.Free;
    end;
  end;
end;
end.
