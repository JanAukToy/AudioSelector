// *****************************************************************************
// Created by JanAukToy
// [Github] https://github.com/JanAukToy
// *****************************************************************************
unit cls_AudioDevice;

interface

uses
  System.SysUtils,
  System.Classes,
  Winapi.Windows,
  Winapi.ActiveX,
  Winapi.PropSys,
  JAT.MMDeviceAPI, JAT.EndpointVolume;

type
  // Changed Valud Event
  TOnControlChangeNotify = procedure(const a_Data
    : AUDIO_VOLUME_NOTIFICATION_DATA) of object;

  // Audio Endpoint Volume Callbak Handler
  TAudioEndpointVolumeCallback = class(TInterfacedObject,
    IAudioEndpointVolumeCallback)
  private
    f_OnControlChangeNotify: TOnControlChangeNotify;
  public
    constructor Create(const a_OnControlChangeNotify: TOnControlChangeNotify);
    destructor Destroy; override;
    function OnNotify(pNotify: AUDIO_VOLUME_NOTIFICATION_DATA)
      : HRESULT; stdcall;
  end;

  // Audio Device Class
  TAudioDevice = class
  private
    f_CompleteInitialize: Boolean;

    f_AudioEndpointVolumeCallback: TAudioEndpointVolumeCallback;

    f_Device: IMMDevice;
    f_AudioEndpointVolume: IAudioEndpointVolume;
    f_InterfaceFriendlyName: string;
    f_DeviceDesc: string;
    f_FriendlyName: string;
    f_InstanceId: string;
    f_ContainerId: TGUID;

    f_ChannelCount: Cardinal;
    f_MasterLevel: Single;
    f_Channel: Cardinal;
    f_ChannelLevel: Single;
    f_Mute: Boolean;
    f_Step: Cardinal;
    f_StepCount: Cardinal;
    f_Min: Single;
    f_Max: Single;
    f_Spin: Single;

    function GetDeviceProps(const a_PropertyStore: IPropertyStore): Boolean;
    function GetAudioEndpointVolumeProps(): Boolean;
    procedure OnControlChangeNotify(const a_Data
      : AUDIO_VOLUME_NOTIFICATION_DATA);
  public
    constructor Create(const a_Device: IMMDevice);
    destructor Destroy; override;

    property CompleteInitialize: Boolean read f_CompleteInitialize;
    property InterfaceFriendlyName: string read f_InterfaceFriendlyName;
    property DeviceDesc: string read f_DeviceDesc;
    property FriendlyName: string read f_FriendlyName;
    property InstanceId: string read f_InstanceId;
    property ContainerId: TGUID read f_ContainerId;

    property ChannelCount: Cardinal read f_ChannelCount;
    property MasterLevel: Single read f_MasterLevel;
    property Channel: Cardinal read f_Channel;
    property ChannelLevel: Single read f_ChannelLevel;
    property Mute: Boolean read f_Mute;
    property Step: Cardinal read f_Step;
    property StepCount: Cardinal read f_StepCount;
    property Min: Single read f_Min;
    property l_Max: Single read f_Max;
    property l_Spin: Single read f_Spin;
  end;

implementation

{ TIAudioEndpointVolumeCallback }

// *****************************************************************************
// Constructor
constructor TAudioEndpointVolumeCallback.Create(const a_OnControlChangeNotify
  : TOnControlChangeNotify);
begin
  inherited Create;

  f_OnControlChangeNotify := a_OnControlChangeNotify;
end;

// *****************************************************************************
// Destructor
destructor TAudioEndpointVolumeCallback.Destroy;
begin
  inherited;
end;

// *****************************************************************************
// Callback
function TAudioEndpointVolumeCallback.OnNotify
  (pNotify: AUDIO_VOLUME_NOTIFICATION_DATA): HRESULT;
begin
  f_OnControlChangeNotify(pNotify);

  Result := S_OK;
end;

{ TAudioDevice }

// *****************************************************************************
// Constructor
constructor TAudioDevice.Create(const a_Device: IMMDevice);
var
  l_Id: PWideChar;
  l_PropertyStore: IPropertyStore;
  l_PointAudioEndpointVolume: Pointer;
begin
  // Init Variable
  f_CompleteInitialize := False;

  // Store Device
  f_Device := a_Device;

  // Get Device ID
  if Succeeded(a_Device.GetId(l_Id)) then
  begin
    // Store ID
    f_InstanceId := l_Id;

    // Get Open Property Interface
    if Succeeded(a_Device.OpenPropertyStore(STGM_READ, l_PropertyStore)) then
    begin
      // Get Device Properties
      if GetDeviceProps(l_PropertyStore) then
      begin
        // Get Audio Endpoint Volume Pointer Interface
        if Succeeded(a_Device.Activate(IID_IAudioEndpointVolume,
          CLSCTX_INPROC_SERVER, nil, l_PointAudioEndpointVolume)) then
        begin
          // Cast to Audio Endpoint Volume
          f_AudioEndpointVolume := IAudioEndpointVolume
            (l_PointAudioEndpointVolume) as IAudioEndpointVolume;

          // Create Callback Class
          f_AudioEndpointVolumeCallback := TAudioEndpointVolumeCallback.Create
            (OnControlChangeNotify);

          // Register Changed Value Callback
          if Succeeded(f_AudioEndpointVolume.RegisterControlChangeNotify
            (f_AudioEndpointVolumeCallback)) then
          begin
            // Get Audio Endpoint Volume Properties
            f_CompleteInitialize := GetAudioEndpointVolumeProps;
          end;
        end;
      end;
    end;
  end;
end;

// *****************************************************************************
// Destructor
destructor TAudioDevice.Destroy;
begin
  if Assigned(f_AudioEndpointVolumeCallback) then
  begin
    // Unregister Callback
    f_AudioEndpointVolume.UnregisterControlChangeNotify
      (f_AudioEndpointVolumeCallback);

    // Auto Destroying by the Above.
  end;

  inherited;
end;

// *****************************************************************************
// Get Device Properties
function TAudioDevice.GetDeviceProps(const a_PropertyStore
  : IPropertyStore): Boolean;
var
  l_PropInterfaceFriendlyName: TPropVariant;
  l_PropDeviceDesc: TPropVariant;
  l_PropFriendlyName: TPropVariant;
  l_PropContainerId: TPropVariant;
begin
  Result := False;

  // Get All Properties
  // [ PKEY_Device_InstanceId ] is IMMDevice::GetId Value
  if (Succeeded(a_PropertyStore.GetValue(PKEY_DeviceInterface_FriendlyName,
    l_PropInterfaceFriendlyName))) and
    (Succeeded(a_PropertyStore.GetValue(PKEY_Device_DeviceDesc,
    l_PropDeviceDesc))) and
    (Succeeded(a_PropertyStore.GetValue(PKEY_Device_FriendlyName,
    l_PropFriendlyName))) and
    (Succeeded(a_PropertyStore.GetValue(PKEY_Device_ContainerId,
    l_PropContainerId))) then
  begin
    f_InterfaceFriendlyName := l_PropInterfaceFriendlyName.pwszVal;
    f_DeviceDesc := l_PropDeviceDesc.pwszVal;
    f_FriendlyName := l_PropFriendlyName.pwszVal;
    f_ContainerId := l_PropContainerId.puuid^;

    Result := True;
  end;
end;

// *****************************************************************************
// Get Auddio Endpoint Volume Properties
function TAudioDevice.GetAudioEndpointVolumeProps: Boolean;
var
  l_ChannelCount: Cardinal;
  l_MasterLevel: Single;
  l_Channel: Cardinal;
  l_ChannelLevel: Single;
  l_Mute: LongBool;
  l_Step: Cardinal;
  l_StepCount: Cardinal;
  l_Min: Single;
  l_Max: Single;
  l_Spin: Single;
begin
  Result := False;

  // Get All Properties
  if (Succeeded(f_AudioEndpointVolume.GetChannelCount(l_ChannelCount))) and
    (Succeeded(f_AudioEndpointVolume.GetMasterVolumeLevelScalar(l_MasterLevel)))
    and (Succeeded(f_AudioEndpointVolume.GetChannelVolumeLevelScalar(l_Channel,
    l_ChannelLevel))) and (Succeeded(f_AudioEndpointVolume.GetMute(l_Mute))) and
    (Succeeded(f_AudioEndpointVolume.GetVolumeStepInfo(l_Step, l_StepCount)))
    and (Succeeded(f_AudioEndpointVolume.GetVolumeRange(l_Min, l_Max, l_Spin)))
  then
  begin
    l_ChannelCount := f_ChannelCount;
    l_MasterLevel := f_MasterLevel;
    l_Channel := f_Channel;
    l_ChannelLevel := f_ChannelLevel;
    l_Mute := f_Mute;
    l_Step := f_Step;
    l_StepCount := f_StepCount;
    l_Min := f_Min;
    l_Max := f_Max;
    l_Spin := f_Spin;

    Result := True;
  end;
end;

// *****************************************************************************
// Changed Value Notify Event
procedure TAudioDevice.OnControlChangeNotify(const a_Data
  : AUDIO_VOLUME_NOTIFICATION_DATA);
var
  l_Data: AUDIO_VOLUME_NOTIFICATION_DATA;
begin;
  l_Data := a_Data;

end;

end.
